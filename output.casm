type [0] = felt252;
type [10] = Uninitialized<[0]>;
type [9] = BuiltinCosts;
type [6] = RangeCheck;
type [7] = GasBuiltin;
type [8] = NonZero<[0]>;
type [1] = Struct<ut@Tuple, [0]>;
type [2] = Struct<ut@core::panics::Panic>;
type [3] = Array<[0]>;
type [4] = Struct<ut@Tuple, [2], [3]>;
type [5] = Enum<ut@core::panics::PanicResult::<(core::felt252,)>, [1], [4]>;

libfunc [16] = alloc_local<[0]>;
libfunc [17] = finalize_locals;
libfunc [18] = disable_ap_tracking;
libfunc [14] = get_builtin_costs;
libfunc [28] = store_temp<[9]>;
libfunc [13] = withdraw_gas_all;
libfunc [19] = branch_align;
libfunc [20] = dup<[0]>;
libfunc [29] = store_temp<[6]>;
libfunc [12] = felt252_is_zero;
libfunc [21] = drop<[0]>;
libfunc [22] = drop<[10]>;
libfunc [23] = felt252_const<1>;
libfunc [30] = store_temp<[7]>;
libfunc [31] = store_temp<[0]>;
libfunc [24] = jump;
libfunc [25] = drop<[8]>;
libfunc [11] = felt252_sub;
libfunc [10] = function_call<user@[0]>;
libfunc [9] = enum_match<[5]>;
libfunc [8] = struct_deconstruct<[1]>;
libfunc [26] = felt252_const<2>;
libfunc [32] = store_local<[0]>;
libfunc [7] = felt252_add;
libfunc [33] = rename<[6]>;
libfunc [34] = rename<[7]>;
libfunc [35] = rename<[0]>;
libfunc [6] = struct_construct<[1]>;
libfunc [5] = enum_init<[5], 0>;
libfunc [36] = store_temp<[5]>;
libfunc [0] = enum_init<[5], 1>;
libfunc [4] = array_new<[0]>;
libfunc [27] = felt252_const<375233589013918064796019>;
libfunc [3] = array_append<[0]>;
libfunc [2] = struct_construct<[2]>;
libfunc [1] = struct_construct<[4]>;

[16]() -> ([4]);
[17]() -> ();
[18]() -> ();
[14]() -> ([5]);
[28]([5]) -> ([5]);
[13]([0], [1], [5]) { fallthrough([6], [7]) 83([8], [9]) };
[19]() -> ();
[20]([2]) -> ([2], [10]);
[29]([6]) -> ([6]);
[12]([10]) { fallthrough() 18([11]) };
[19]() -> ();
[21]([2]) -> ();
[22]([4]) -> ();
[23]() -> ([12]);
[29]([6]) -> ([13]);
[30]([7]) -> ([14]);
[31]([12]) -> ([15]);
[24]() { 62() };
[19]() -> ();
[25]([11]) -> ();
[23]() -> ([16]);
[20]([2]) -> ([2], [18]);
[11]([18], [16]) -> ([17]);
[31]([17]) -> ([17]);
[12]([17]) { fallthrough() 33([19]) };
[19]() -> ();
[21]([2]) -> ();
[22]([4]) -> ();
[23]() -> ([20]);
[29]([6]) -> ([21]);
[30]([7]) -> ([22]);
[31]([20]) -> ([23]);
[24]() { 59() };
[19]() -> ();
[25]([19]) -> ();
[23]() -> ([24]);
[20]([2]) -> ([2], [26]);
[11]([26], [24]) -> ([25]);
[29]([6]) -> ([30]);
[30]([7]) -> ([31]);
[31]([25]) -> ([32]);
[10]([30], [31], [32]) -> ([27], [28], [29]);
[9]([29]) { fallthrough([33]) 75([34]) };
[19]() -> ();
[8]([33]) -> ([3]);
[26]() -> ([35]);
[11]([2], [35]) -> ([36]);
[29]([27]) -> ([40]);
[30]([28]) -> ([41]);
[31]([36]) -> ([42]);
[32]([4], [3]) -> ([3]);
[10]([40], [41], [42]) -> ([37], [38], [39]);
[9]([39]) { fallthrough([43]) 68([44]) };
[19]() -> ();
[8]([43]) -> ([45]);
[7]([3], [45]) -> ([46]);
[29]([37]) -> ([21]);
[30]([38]) -> ([22]);
[31]([46]) -> ([23]);
[33]([21]) -> ([13]);
[34]([22]) -> ([14]);
[35]([23]) -> ([15]);
[6]([15]) -> ([47]);
[5]([47]) -> ([48]);
[29]([13]) -> ([49]);
[30]([14]) -> ([50]);
[36]([48]) -> ([51]);
return([49], [50], [51]);
[19]() -> ();
[21]([3]) -> ();
[0]([44]) -> ([52]);
[29]([37]) -> ([53]);
[30]([38]) -> ([54]);
[36]([52]) -> ([55]);
return([53], [54], [55]);
[19]() -> ();
[21]([2]) -> ();
[22]([4]) -> ();
[0]([34]) -> ([56]);
[29]([27]) -> ([57]);
[30]([28]) -> ([58]);
[36]([56]) -> ([59]);
return([57], [58], [59]);
[19]() -> ();
[21]([2]) -> ();
[22]([4]) -> ();
[4]() -> ([60]);
[27]() -> ([61]);
[31]([61]) -> ([61]);
[3]([60], [61]) -> ([62]);
[2]() -> ([63]);
[1]([63], [62]) -> ([64]);
[0]([64]) -> ([65]);
[29]([8]) -> ([66]);
[30]([9]) -> ([67]);
[36]([65]) -> ([68]);
return([66], [67], [68]);

[0]@0([0]: [6], [1]: [7], [2]: [0]) -> ([6], [7], [5]);
