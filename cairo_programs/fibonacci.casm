[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 10, ap++;
call rel 23;
jmp rel 14 if [ap + -3] != 0;
[ap + 0] = [ap + -1], ap++;
call rel 113;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
ap += 1;
call rel 106;
[ap + 0] = [ap + -1] + 105, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = 5250 <= memory[fp + -4] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[fp + -4] = [ap + 0] + 5250, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -5] + 0];
jmp rel 67;
[fp + -4] = [ap + 0] + 5250, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + 0] = [fp + -5] + 1, ap++;
jmp rel 8 if [fp + -3] != 0;
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
jmp rel 32;
[fp + -3] = [ap + 0] + 1, ap++;
jmp rel 8 if [ap + -1] != 0;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 1, ap++;
jmp rel 22;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[fp + -3] = [ap + 0] + 1, ap++;
call rel -43;
jmp rel 29 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[fp + -3] = [ap + 0] + 2, ap++;
[fp + 0] = [ap + -4];
call rel -52;
jmp rel 13 if [ap + -3] != 0;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [fp + 0] + [ap + -3], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
[ap + 0] = [fp + -3], ap++;
call rel 3;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[fp + -3] = [[ap + -1] + 0];
[ap + 0] = [ap + -1], ap++;
[ap + 0] = [ap + -2] + 1, ap++;
%{
curr = memory[ap + -2]
end = memory[ap + -1]
while curr != end:
    print(hex(memory[curr]))
    curr += 1
%}
ap += 0;
ret;
